#include <iostream>
#include <cmath>
#include <cstring>
using namespace std;


class Point {
private:
    double x, y;
public:
    Point(double _x, double _y) : x(_x), y(_y) {}
    double _x() { return x; }
    double _y() { return y; }
    double distanceTo(const Point & p) { return sqrt((x-p.x)*(x-p.x) + (y-p.y)*(y-p.y)); }
};

class Line{
private:
    double slope;
    double intercept;

public:
    //constructor created
    Line(double m, double inter)
    {
        slope = m;
        intercept = inter;
        std::cout << "And the final line equation is: "
                  << "y = " << slope << " x  + " << intercept << '\n';
    }
   Line(double x1, double y1, double x2, double y2){
       slope = (y2-y1)/(x2-x1);
       intercept = y1 - slope *x1;
       std::cout << "And the final line equation is monkey: "
                 << "y = " << slope << " x  + " << intercept << '\n';



   }

    double distanceTo(Point p){

       double d = fabs(-slope*p._x()+p._y()-intercept)/sqrt(slope*slope+1);
        cout<<"Perpendicular distance is\n"<<d<< endl;
        return d;


    }

     Point intersection(Line ln){

        double intersectionX = (intercept - ln.intercept) / (ln.slope - slope);
        double intersectionY = slope*intersectionX+intercept;
         Point p(intersectionX,intersectionY);
        return p;
    }



};

//Q2
Point solve(double a1, double b1, double c1, double a2, double b2, double c2) {
//use Line objects here to find the answer - don't rewrite any code unnecessarily
//Line objects created
// The l1 object calls the intersection function and puts l2 as its parameter to solve for both l1 and l2 to get the solution as a line
Line l1(-a1/b1,-c1/b1), l2(-a2/b2,-c2/b2);

return l1.intersection(l2);
}
//Q3

//Parent class Student is create and it is used for up until question 6
// As all the child classes inherit from it
class Student{
private:
    int ID;
    string firstname, lastname;

public:
    // Student constructor is created
Student(int id,string fn, string ln): ID(id),firstname(fn),lastname(ln){}

int getID(){return ID;}

virtual string getType()=0;

virtual void printInfo(){
    cout<<"Student Details " <<
    "\n ID:: "<< ID<<
    "\n First name: "<< firstname<<
    "\n Last name: "<< lastname << endl;

}
};


//Q4
//Class inherits from the parent class Student
class ResearchStudent: public Student{

private:
    string supername, thesis;

public:
    // Constructor is created using the Student constrcuctor and the nupervisor name and thesis name are created in this constructor as well
    ResearchStudent(int id, string fn, string ln, string sn, string tn): Student(id,fn,ln){ supername=sn; thesis=tn;}

    string getType(){
        return ("ResearchStudent");
    }
    void printInfo(){
        Student::printInfo();// The parent Student class  function printInfo is called and is used in this function
        cout<<"Supervisor name\n"<<supername<< endl << "Thesis name:\n" << thesis<< endl;

    }

};
//Q5
class TaughtStudent: public Student{

private:
    string module[10];
     int numRegisteredModules;

public:

    TaughtStudent(int id, string fn, string ln):Student(id,fn,ln){
        numRegisteredModules=0;
    }
//Module name increments the array of module
// Returns the number of registered modules
    bool registerFor(const string & moduleName){

        if(numRegisteredModules<=10) {
           // for (int i = 0; i > 0 ; i++) {
           // moduleName[numRegisteredModules];
            module[numRegisteredModules] = moduleName;
            numRegisteredModules++;
            return true;
            }
        else {return false;}

    }
    // Prints info of the student
    void printInfo(){

        Student::printInfo();
        this->getType();

        cout<<"\nNumber of Registered Modules: "<<numRegisteredModules;
        cout<<" Registered Modules\n";

        for(int i=0;i<numRegisteredModules;i++){
         //   for(int j=0;j<10;++j)

                cout<<module[i] << endl;


        }

    }

     string getType() {
        return ("Taught Student");
    }

};
//Q6
void studentTester() {
    // Research student objects created
    ResearchStudent researchStudent1(182392,"Joe ","Mama","Sugma","How does the Corona Virus Spread?");
    ResearchStudent researchStudent2(182389,"Aoife ","Harte","CrackerJack","Why are my enchiladas so tasty?");

    // Taught student objects created
    TaughtStudent taughtStudent1(17122,"Aditi","Verma");
    TaughtStudent taughtStudent2(17222,"Niamh","Briody");

    //Students are registered for their modules
    taughtStudent1.registerFor("Pneumatics");
    taughtStudent1.registerFor("Systems");
    taughtStudent1.registerFor("EM Maths ");

    taughtStudent2.registerFor("Pneumatics");
    taughtStudent2.registerFor("Systems");
    taughtStudent2.registerFor("Circuits ");
    //Array of Student pointer  is created
    Student* stu[4];
    stu[0] = &researchStudent1;
    stu[1] = &researchStudent2;
    stu[2] = &taughtStudent1 ;
    stu[3] = &taughtStudent2;


    cout << "|| Displaying all Student information ||" << endl;
    for (int i=0; i<4; i++) {
        cout << "==============================================" << endl;
        // The student type string is declared and gets the type of the Student class
        string studentType = stu[i]->getType();
        cout << "Student Type: " << studentType << endl;// It then prints out the student type
       // cout << "Student Details:" << endl;//It then prints out the Student details
        stu[i]->printInfo();
        cout << "==============================================" << endl;
    }


}

//Q7
// A memory leak happens when an object is stored in memory but cannot be accessed by the running code
// This code leaks memory because it can not access the object e1 but stores it
// The new operator that is created because it does not have a delete that de-assigns now it causes memory leak

class Employee{

private:
    //int IDnum;
    string name;
    static int nextEmployeeNumber;
    static int totalNumberEmployees;

//private:
   // void contruct();

public:
     Employee(string nm) : name(nm) { nextEmployeeNumber++; totalNumberEmployees++;  }
    ~Employee() { totalNumberEmployees--; }
    static int numEmployees() { return totalNumberEmployees; }

};
int Employee::totalNumberEmployees = 0;
int Employee::nextEmployeeNumber= 1001;


//int Employee::numEmployees() = 0;
//
// main() - TEST CODE
//

int main(){
    //Point p=solve(2.5,-2.0,3.0,1.5,-3.0,-4.1);
    //cout << "Equations solution is x= " << p._x() << " y= " << p._y();
    Point sol = solve(2.5, -2.0, 3.0, 1.5, -3.0, -4.1);
    cout << "Equations solution is x = " << sol._x() << " and y = " << sol._y() << endl;

    Line l2(2,6);
   // l2.distanceTo(Point(2,2));
   // Line l1(2,5,4,3);
    //l1.distanceTo(Point (2,2));
    //Line l3(2, 4,2,4);
    // l2.intersection(l3);


    cout << "Number of employees " << Employee::numEmployees() << endl;
    {
        Employee* e1 = new Employee("John Smith");
        Employee* e2 = new Employee("Aoife Harte");
    }
    cout << "Number of employees " << Employee::numEmployees() << endl;

    studentTester();

}